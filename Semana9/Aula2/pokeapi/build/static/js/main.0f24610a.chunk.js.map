{"version":3,"sources":["Componentes/Pokecard/Pokecard.js","App.js","reportWebVitals.js","index.js"],"names":["Pokecard","props","useState","pokepoke","setPokepoke","useEffect","console","log","pegaPokemon","pokeName","axios","get","then","response","data","catch","err","name","weight","types","type","src","sprites","front_default","alt","App","pokeList","setPokeList","setPokeName","results","onChange","event","target","value","map","pokemon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOA4CeA,MAvCf,SAAkBC,GAAQ,IAAD,EACSC,mBAAS,IADlB,mBACfC,EADe,KACNC,EADM,KAIrBC,qBAAU,WACNC,QAAQC,IAAIN,GACZO,EAAYP,EAAMQ,YAEnB,IAEH,IAAMD,EAAc,SAACC,GAEjBC,IACKC,IADL,4CAC8CF,IACzCG,MAAK,SAAAC,GAIFT,EAAYS,EAASC,MACrBR,QAAQC,IAAIM,EAASC,SAExBC,OAAM,SAAAC,GACHV,QAAQC,IAAIS,OAOxB,OACI,8BACKb,GAAY,gCAAK,8BAAMA,EAASc,OACjC,8BAAMd,EAASe,SACf,8BAAMf,EAASgB,MAAM,GAAGC,KAAKH,OAC7B,qBAAKI,IAAKlB,EAASmB,QAAQC,cAAeC,IAAKrB,EAASc,aCcrDQ,MA5Cf,WAAgB,IAAD,EACmBvB,mBAAS,IAD5B,mBACNwB,EADM,KACIC,EADJ,OAEmBzB,mBAAS,IAF5B,mBAENO,EAFM,KAEImB,EAFJ,KA4Bb,OATAvB,qBAAU,WAZRK,IACGC,IAAI,gDACJC,MAAK,SAACC,GAELc,EAAYd,EAASC,KAAKe,SAC1BvB,QAAQC,IAAIM,EAASC,KAAKe,YAE3Bd,OAAM,SAAAC,GACLV,QAAQC,IAAIS,QAMf,IAQD,gCACE,yBAAQc,SAPS,SAACC,GACpBH,EAAYG,EAAMC,OAAOC,QAMvB,UACE,2BACCP,EAASQ,KAAI,SAAAC,GACZ,OACE,wBAA2BF,MAAOE,EAAQlB,KAA1C,SAAiDkB,EAAQlB,MAA5CkB,EAAQlB,YAI1BR,GAAY,cAAC,EAAD,CAAUA,SAAUA,QCnCxB2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0f24610a.chunk.js","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react'\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction Pokecard(props) { \r\n    const[pokepoke,setPokepoke] = useState({})\r\n    \r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n        pegaPokemon(props.pokeName)\r\n        \r\n    }, [])\r\n\r\n    const pegaPokemon = (pokeName) => {\r\n\r\n        axios\r\n            .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\r\n            .then(response => {\r\n                // guarda as infos do pokemon no estado\r\n                // this.setState({ pokemon: response.data });\r\n                // console.log(response.data)\r\n                setPokepoke(response.data) \r\n                console.log(response.data)               \r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {pokepoke && <div><div>{pokepoke.name}</div>\r\n            <div>{pokepoke.weight}</div>\r\n            <div>{pokepoke.types[0].type.name}</div>\r\n            <img src={pokepoke.sprites.front_default} alt={pokepoke.name} /></div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pokecard;","\nimport './App.css';\nimport React, { useState, useEffect } from 'react'\nimport axios from \"axios\";\nimport Pokecard from './Componentes/Pokecard/Pokecard';\n\n\n\n\nfunction App() {\n  const [pokeList, setPokeList] = useState([])\n  const [pokeName, setPokeName] = useState(\"\")\n\n\n  const listarPokemons = () => {\n    // função axios que está batendo na API e buscando 151 pokemons\n    axios\n      .get(\"https://pokeapi.co/api/v2/pokemon/?limit=151\")\n      .then((response) => {\n        // função que está setando no estado os 151 pokemons\n        setPokeList(response.data.results)\n        console.log(response.data.results)\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }  \n\n  useEffect(() => {\n    listarPokemons()\n  }, [])\n\n  let changePokeName = (event) =>{\n    setPokeName(event.target.value)\n    // console.log(event.target.value)\n  }\n\n  return (\n    <div>\n      <select onChange={changePokeName}>\n        <option ></option>\n        {pokeList.map(pokemon => {\n          return (\n            <option key={pokemon.name} value={pokemon.name}>{pokemon.name}</option>\n          )\n        })}\n      </select>\n      {pokeName && <Pokecard pokeName={pokeName} />}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}